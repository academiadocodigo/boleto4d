{$I ACBr.inc}
unit ACBr_WinHttp;

interface

uses
  Windows, Types;

{$IF not DECLARED(PVOID)}
type
  PVOID = Pointer;
  {$EXTERNALSYM PVOID}
{$IFEND}
{$IF not DECLARED(LPVOID)}
type
  LPVOID = Pointer;
  {$EXTERNALSYM LPVOID}
{$IFEND}
{$IF not DECLARED(LPCVOID)}
type
  LPCVOID = Pointer;
  {$EXTERNALSYM LPCVOID}
{$IFEND}
{$IF not DECLARED(PVOID)}
type
  PVOID = Pointer;
  {$EXTERNALSYM PVOID}
{$IFEND}
{$IF not DECLARED(PWSTR)}
type
  PWSTR = PWideChar;
  {$EXTERNALSYM PWSTR}
{$IFEND}
{$IF not DECLARED(PCWSTR)}
type
  PCWSTR = PWideChar;
  {$EXTERNALSYM PCWSTR}
{$IFEND}

{$IFNDEF FPC}
  {$IFDEF WIN64}
   PtrUInt = Int64{QWord};
  {$ELSE}
   PtrUInt = DWord;
  {$ENDIF}
  DWORD_PTR = PtrUInt;
  USHORT = word;
{$ENDIF}

//{$REGION 'winhttp.h'}
{*
 * Set up Structure Packing to be 4 bytes for all winhttp structures
 *}
{$IF DEFINED(WIN64)}
  {$ALIGN 8}
{$ELSE}
  {$ALIGN 4}
{$IFEND}

//
// types
//
type
  HINTERNET = Pointer;
  {$EXTERNALSYM HINTERNET}
  PHINTERNET = ^HINTERNET;
  {$EXTERNALSYM PHINTERNET}
  LPHINTERNET = PHINTERNET;
  {$EXTERNALSYM LPHINTERNET}

  INTERNET_PORT = WORD;
  {$EXTERNALSYM INTERNET_PORT}
  PINTERNET_PORT = ^INTERNET_PORT;
  {$EXTERNALSYM PINTERNET_PORT}
  LPINTERNET_PORT = PINTERNET_PORT;
  {$EXTERNALSYM LPINTERNET_PORT}

//
// manifests
//
const
  INTERNET_DEFAULT_PORT         = 0;           // use the protocol-specific default
  {$EXTERNALSYM INTERNET_DEFAULT_PORT}
  INTERNET_DEFAULT_HTTP_PORT    = 80;          //    "     "  HTTP   "
  {$EXTERNALSYM INTERNET_DEFAULT_HTTP_PORT}
  INTERNET_DEFAULT_HTTPS_PORT   = 443;         //    "     "  HTTPS  "
  {$EXTERNALSYM INTERNET_DEFAULT_HTTPS_PORT}

// flags for WinHttpOpen():
  WINHTTP_FLAG_ASYNC            = $10000000;   // this session is asynchronous (where supported)
  {$EXTERNALSYM WINHTTP_FLAG_ASYNC}

// flags for WinHttpOpenRequest():
  WINHTTP_FLAG_SECURE               = $00800000;  // use SSL if applicable (HTTPS)
  {$EXTERNALSYM WINHTTP_FLAG_SECURE}
  WINHTTP_FLAG_ESCAPE_PERCENT       = $00000004;  // if escaping enabled, escape percent as well
  {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_PERCENT}
  WINHTTP_FLAG_NULL_CODEPAGE        = $00000008;  // assume all symbols are ASCII, use fast convertion
  {$EXTERNALSYM WINHTTP_FLAG_NULL_CODEPAGE}
  WINHTTP_FLAG_BYPASS_PROXY_CACHE   = $00000100;  // add "pragma: no-cache" request header
  {$EXTERNALSYM WINHTTP_FLAG_BYPASS_PROXY_CACHE}
  WINHTTP_FLAG_REFRESH              = WINHTTP_FLAG_BYPASS_PROXY_CACHE;
  {$EXTERNALSYM WINHTTP_FLAG_REFRESH}
  WINHTTP_FLAG_ESCAPE_DISABLE       = $00000040;  // disable escaping
  {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_DISABLE}
  WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = $00000080;  // if escaping enabled escape path part, but do not escape query
  {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_DISABLE_QUERY}


  SECURITY_FLAG_IGNORE_UNKNOWN_CA        = $00000100;
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_UNKNOWN_CA}
  SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = $00002000; // expired X509 Cert.
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_DATE_INVALID}
  SECURITY_FLAG_IGNORE_CERT_CN_INVALID   = $00001000; // bad common name in X509 Cert.
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_CN_INVALID}
  SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE  = $00000200;
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE}


//
// WINHTTP_ASYNC_RESULT - this structure is returned to the application via
// the callback with WINHTTP_CALLBACK_STATUS_REQUEST_COMPLETE. It is not sufficient to
// just return the result of the async operation. If the API failed then the
// app cannot call GetLastError() because the thread context will be incorrect.
// Both the value returned by the async API and any resultant error code are
// made available. The app need not check dwError if dwResult indicates that
// the API succeeded (in this case dwError will be ERROR_SUCCESS)
//

type
  PWinHttpAsyncResult = ^TWinHttpAsyncResult;
  WINHTTP_ASYNC_RESULT = record
    dwResult: DWORD_PTR;  // indicates which async API has encountered an error
    dwError: DWORD;       // the error code if the API failed
  end;
  {$EXTERNALSYM WINHTTP_ASYNC_RESULT}
  LPWINHTTP_ASYNC_RESULT = PWinHttpAsyncResult;
  {$EXTERNALSYM LPWINHTTP_ASYNC_RESULT}
  TWinHttpAsyncResult = WINHTTP_ASYNC_RESULT;

//
// HTTP_VERSION_INFO - query or set global HTTP version (1.0 or 1.1)
//

  PHttpVersionInfo = ^THttpVersionInfo;
  HTTP_VERSION_INFO = record
    dwMajorVersion: DWORD;
    dwMinorVersion: DWORD;
  end;
  {$EXTERNALSYM HTTP_VERSION_INFO}
  LPHTTP_VERSION_INFO = PHttpVersionInfo;
  {$EXTERNALSYM LPHTTP_VERSION_INFO}
  THttpVersionInfo = HTTP_VERSION_INFO;

//
// INTERNET_SCHEME - URL scheme type
//

  PInternetScheme = ^TInternetScheme;
  INTERNET_SCHEME = Integer;
  {$EXTERNALSYM INTERNET_SCHEME}
  LPINTERNET_SCHEME = PInternetScheme;
  {$EXTERNALSYM LPINTERNET_SCHEME}
  TInternetScheme = Integer;

const
  INTERNET_SCHEME_HTTP      = (1);
  {$EXTERNALSYM INTERNET_SCHEME_HTTP}
  INTERNET_SCHEME_HTTPS     = (2);
  {$EXTERNALSYM INTERNET_SCHEME_HTTPS}
  INTERNET_SCHEME_FTP       = (3);
  {$EXTERNALSYM INTERNET_SCHEME_FTP}
  INTERNET_SCHEME_SOCKS     = (4);
  {$EXTERNALSYM INTERNET_SCHEME_SOCKS}

//
// URL_COMPONENTS - the constituent parts of an URL. Used in WinHttpCrackUrl()
// and WinHttpCreateUrl()
//
// For WinHttpCrackUrl(), if a pointer field and its corresponding length field
// are both 0 then that component is not returned. If the pointer field is NULL
// but the length field is not zero, then both the pointer and length fields are
// returned if both pointer and corresponding length fields are non-zero then
// the pointer field points to a buffer where the component is copied. The
// component may be un-escaped, depending on dwFlags
//
// For WinHttpCreateUrl(), the pointer fields should be NULL if the component
// is not required. If the corresponding length field is zero then the pointer
// field is the address of a zero-terminated string. If the length field is not
// zero then it is the string length of the corresponding pointer field
//

//#pragma warning( disable : 4121 )   // disable alignment warning

type
  PURLComponents = ^TURLComponents;
  URL_COMPONENTS = record
    dwStructSize: DWORD;       // size of this structure. Used in version check
    lpszScheme: LPWSTR;        // pointer to scheme name
    dwSchemeLength: DWORD;     // length of scheme name
    nScheme: TInternetScheme;  // enumerated scheme type (if known)
    lpszHostName: LPWSTR;      // pointer to host name
    dwHostNameLength: DWORD;   // length of host name
    nPort: INTERNET_PORT;      // converted port number
    lpszUserName: LPWSTR;      // pointer to user name
    dwUserNameLength: DWORD;   // length of user name
    lpszPassword: LPWSTR;      // pointer to password
    dwPasswordLength: DWORD;   // length of password
    lpszUrlPath: LPWSTR;       // pointer to URL-path
    dwUrlPathLength: DWORD;    // length of URL-path
    lpszExtraInfo: LPWSTR;     // pointer to extra information (e.g. ?foo or #foo)
    dwExtraInfoLength: DWORD;  // length of extra information
  end;
  {$EXTERNALSYM URL_COMPONENTS}
  LPURL_COMPONENTS = PURLComponents;
  {$EXTERNALSYM LPURL_COMPONENTS}
  TURLComponents = URL_COMPONENTS;

  PURLComponentsW = ^TURLComponentsW;
  URL_COMPONENTSW = URL_COMPONENTS;
  {$EXTERNALSYM URL_COMPONENTSW}
  TURLComponentsW = URL_COMPONENTS;
  LPURL_COMPONENTSW = PURLComponentsW;
  {$EXTERNALSYM LPURL_COMPONENTSW}

//#pragma warning( default : 4121 )   // restore alignment warning

//
// WINHTTP_PROXY_INFO - structure supplied with WINHTTP_OPTION_PROXY to get/
// set proxy information on a WinHttpOpen() handle
//

  PWinHttpProxyInfo = ^TWinHttpProxyInfo;
  WINHTTP_PROXY_INFO = record
    dwAccessType: DWORD;       // see WINHTTP_ACCESS_* types below
    lpszProxy: LPWSTR;         // proxy server list
    lpszProxyBypass: LPWSTR;   // proxy bypass list
  end;
  {$EXTERNALSYM WINHTTP_PROXY_INFO}
  LPWINHTTP_PROXY_INFO = PWinHttpProxyInfo;
  {$EXTERNALSYM LPWINHTTP_PROXY_INFO}
  TWinHttpProxyInfo = WINHTTP_PROXY_INFO;

  PWinHttpProxyInfoW = ^TWinHttpProxyInfoW;
  WINHTTP_PROXY_INFOW = WINHTTP_PROXY_INFO;
  {$EXTERNALSYM WINHTTP_PROXY_INFOW}
  TWinHttpProxyInfoW = WINHTTP_PROXY_INFO;
  LPWINHTTP_PROXY_INFOW = PWinHttpProxyInfoW;
  {$EXTERNALSYM LPWINHTTP_PROXY_INFOW}

  PWinHttpAutoProxyOptions = ^TWinHttpAutoProxyOptions;
  WINHTTP_AUTOPROXY_OPTIONS = record
    dwFlags: DWORD;
    dwAutoDetectFlags: DWORD;
    lpszAutoConfigUrl: LPCWSTR;
    lpvReserved: LPVOID;
    dwReserved: DWORD;
    fAutoLogonIfChallenged: BOOL;
  end;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_OPTIONS}
  TWinHttpAutoProxyOptions = WINHTTP_AUTOPROXY_OPTIONS;

const
  WINHTTP_AUTOPROXY_AUTO_DETECT         = $00000001;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_AUTO_DETECT}
  WINHTTP_AUTOPROXY_CONFIG_URL          = $00000002;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_CONFIG_URL}
  WINHTTP_AUTOPROXY_HOST_KEEPCASE       = $00000004;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_HOST_KEEPCASE}
  WINHTTP_AUTOPROXY_HOST_LOWERCASE      = $00000008;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_HOST_LOWERCASE}
  WINHTTP_AUTOPROXY_RUN_INPROCESS       = $00010000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_RUN_INPROCESS}
  WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY = $00020000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY}
  WINHTTP_AUTOPROXY_NO_DIRECTACCESS     = $00040000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_NO_DIRECTACCESS}
  WINHTTP_AUTOPROXY_NO_CACHE_CLIENT     = $00080000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_NO_CACHE_CLIENT}
  WINHTTP_AUTOPROXY_NO_CACHE_SVC        = $00100000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_NO_CACHE_SVC}

  WINHTTP_AUTOPROXY_SORT_RESULTS        = $00400000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_SORT_RESULTS}

//
// Flags for dwAutoDetectFlags
//
  WINHTTP_AUTO_DETECT_TYPE_DHCP         = $00000001;
  {$EXTERNALSYM WINHTTP_AUTO_DETECT_TYPE_DHCP}
  WINHTTP_AUTO_DETECT_TYPE_DNS_A        = $00000002;
  {$EXTERNALSYM WINHTTP_AUTO_DETECT_TYPE_DNS_A}

//
// WINHTTP_PROXY_RESULT - structure containing parsed proxy result,
// see WinHttpGetProxyForUrlEx and WinHttpGetProxyResult, use WinHttpFreeProxyResult to free its members.
//

type
  PWinHttpProxyResultEntry = ^TWinHttpProxyResultEntry;
  _WINHTTP_PROXY_RESULT_ENTRY = record
    fProxy: BOOL;                            // Is this a proxy or DIRECT?
    fBypass: BOOL;                           // If DIRECT, is it bypassing a proxy (intranet) or is all traffic DIRECT (internet)
    ProxyScheme: TInternetScheme;            // The scheme of the proxy, SOCKS, HTTP (CERN Proxy), HTTPS (SSL through Proxy)
    pwszProxy: PWSTR;                        // Hostname of the proxy.
    ProxyPort: INTERNET_PORT;                // Port of the proxy.
  end;
  {$EXTERNALSYM _WINHTTP_PROXY_RESULT_ENTRY}
  WINHTTP_PROXY_RESULT_ENTRY = _WINHTTP_PROXY_RESULT_ENTRY;
  {$EXTERNALSYM WINHTTP_PROXY_RESULT_ENTRY}
  TWinHttpProxyResultEntry = _WINHTTP_PROXY_RESULT_ENTRY;

  PWinHttpProxyResult = ^TWinHttpProxyResult;
  _WINHTTP_PROXY_RESULT = record
    cEntries: DWORD;
    pEntries: PWinHttpProxyResultEntry;
  end;
  {$EXTERNALSYM _WINHTTP_PROXY_RESULT}
  WINHTTP_PROXY_RESULT = _WINHTTP_PROXY_RESULT;
  {$EXTERNALSYM WINHTTP_PROXY_RESULT}
  TWinHttpProxyResult = _WINHTTP_PROXY_RESULT;

//
// WINHTTP_CERTIFICATE_INFO lpBuffer - contains the certificate returned from
// the server
//
type
  PWinHttpCertificateInfo = ^TWinHttpCertificateInfo;
  WINHTTP_CERTIFICATE_INFO = record
    //
    // ftExpiry - date the certificate expires.
    //

    ftExpiry: TFileTime;

    //
    // ftStart - date the certificate becomes valid.
    //

    ftStart: TFileTime;

    //
    // lpszSubjectInfo - the name of organization, site, and server
    //   the cert. was issued for.
    //

    lpszSubjectInfo: LPWSTR;

    //
    // lpszIssuerInfo - the name of orgainzation, site, and server
    //   the cert was issues by.
    //

    lpszIssuerInfo: LPWSTR;

    //
    // lpszProtocolName - the name of the protocol used to provide the secure
    //   connection.
    //

    lpszProtocolName: LPWSTR;

    //
    // lpszSignatureAlgName - the name of the algorithm used for signing
    //  the certificate.
    //

    lpszSignatureAlgName: LPWSTR;

    //
    // lpszEncryptionAlgName - the name of the algorithm used for
    //  doing encryption over the secure channel (SSL) connection.
    //

    lpszEncryptionAlgName: LPWSTR;

    //
    // dwKeySize - size of the key.
    //

    dwKeySize: DWORD;

  end;
  {$EXTERNALSYM WINHTTP_CERTIFICATE_INFO}
  TWinHttpCertificateInfo = WINHTTP_CERTIFICATE_INFO;

(*
#ifdef _WS2DEF_

  PWinHttpConnectionInfo = ^TWinHttpConnectionInfo;
  WINHTTP_CONNECTION_INFO = record
    cbSize: DWORD;
    LocalAddress: SOCKADDR_STORAGE;  // local ip, local port
    RemoteAddress: SOCKADDR_STORAGE; // remote ip, remote port
  end;
  {$EXTERNALSYM WINHTTP_CONNECTION_INFO}
  TWinHttpConnectionInfo = WINHTTP_CONNECTION_INFO;

#endif
*)

//
// constants for WinHttpTimeFromSystemTime
//
const
  WINHTTP_TIME_FORMAT_BUFSIZE  = 62;
  {$EXTERNALSYM WINHTTP_TIME_FORMAT_BUFSIZE}

//
// options manifests for WinHttp{Query|Set}Option
//
const
  WINHTTP_FIRST_OPTION                          =  1; //WINHTTP_OPTION_CALLBACK;
  {$EXTERNALSYM WINHTTP_FIRST_OPTION}

  WINHTTP_OPTION_CALLBACK                       =  1;
  {$EXTERNALSYM WINHTTP_OPTION_CALLBACK}
  WINHTTP_OPTION_RESOLVE_TIMEOUT                =  2;
  {$EXTERNALSYM WINHTTP_OPTION_RESOLVE_TIMEOUT}
  WINHTTP_OPTION_CONNECT_TIMEOUT                =  3;
  {$EXTERNALSYM WINHTTP_OPTION_CONNECT_TIMEOUT}
  WINHTTP_OPTION_CONNECT_RETRIES                =  4;
  {$EXTERNALSYM WINHTTP_OPTION_CONNECT_RETRIES}
  WINHTTP_OPTION_SEND_TIMEOUT                   =  5;
  {$EXTERNALSYM WINHTTP_OPTION_SEND_TIMEOUT}
  WINHTTP_OPTION_RECEIVE_TIMEOUT                =  6;
  {$EXTERNALSYM WINHTTP_OPTION_RECEIVE_TIMEOUT}
  WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT       =  7;
  {$EXTERNALSYM WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT}
  WINHTTP_OPTION_HANDLE_TYPE                    =  9;
  {$EXTERNALSYM WINHTTP_OPTION_HANDLE_TYPE}
  WINHTTP_OPTION_READ_BUFFER_SIZE               = 12;
  {$EXTERNALSYM WINHTTP_OPTION_READ_BUFFER_SIZE}
  WINHTTP_OPTION_WRITE_BUFFER_SIZE              = 13;
  {$EXTERNALSYM WINHTTP_OPTION_WRITE_BUFFER_SIZE}
  WINHTTP_OPTION_PARENT_HANDLE                  = 21;
  {$EXTERNALSYM WINHTTP_OPTION_PARENT_HANDLE}
  WINHTTP_OPTION_EXTENDED_ERROR                 = 24;
  {$EXTERNALSYM WINHTTP_OPTION_EXTENDED_ERROR}
  WINHTTP_OPTION_SECURITY_FLAGS                 = 31;
  {$EXTERNALSYM WINHTTP_OPTION_SECURITY_FLAGS}
  WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT    = 32;
  {$EXTERNALSYM WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT}
  WINHTTP_OPTION_URL                            = 34;
  {$EXTERNALSYM WINHTTP_OPTION_URL}
  WINHTTP_OPTION_SECURITY_KEY_BITNESS           = 36;
  {$EXTERNALSYM WINHTTP_OPTION_SECURITY_KEY_BITNESS}
  WINHTTP_OPTION_PROXY                          = 38;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY}
  WINHTTP_OPTION_PROXY_RESULT_ENTRY             = 39;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY_RESULT_ENTRY}

  WINHTTP_OPTION_USER_AGENT                     = 41;
  {$EXTERNALSYM WINHTTP_OPTION_USER_AGENT}
  WINHTTP_OPTION_CONTEXT_VALUE                  = 45;
  {$EXTERNALSYM WINHTTP_OPTION_CONTEXT_VALUE}
  WINHTTP_OPTION_CLIENT_CERT_CONTEXT            = 47;
  {$EXTERNALSYM WINHTTP_OPTION_CLIENT_CERT_CONTEXT}
  WINHTTP_OPTION_REQUEST_PRIORITY               = 58;
  {$EXTERNALSYM WINHTTP_OPTION_REQUEST_PRIORITY}
  WINHTTP_OPTION_HTTP_VERSION                   = 59;
  {$EXTERNALSYM WINHTTP_OPTION_HTTP_VERSION}
  WINHTTP_OPTION_DISABLE_FEATURE                = 63;
  {$EXTERNALSYM WINHTTP_OPTION_DISABLE_FEATURE}

  WINHTTP_OPTION_CODEPAGE                       = 68;
  {$EXTERNALSYM WINHTTP_OPTION_CODEPAGE}
  WINHTTP_OPTION_MAX_CONNS_PER_SERVER           = 73;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_CONNS_PER_SERVER}
  WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER       = 74;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER}
  WINHTTP_OPTION_AUTOLOGON_POLICY               = 77;
  {$EXTERNALSYM WINHTTP_OPTION_AUTOLOGON_POLICY}
  WINHTTP_OPTION_SERVER_CERT_CONTEXT            = 78;
  {$EXTERNALSYM WINHTTP_OPTION_SERVER_CERT_CONTEXT}
  WINHTTP_OPTION_ENABLE_FEATURE                 = 79;
  {$EXTERNALSYM WINHTTP_OPTION_ENABLE_FEATURE}
  WINHTTP_OPTION_WORKER_THREAD_COUNT            = 80;
  {$EXTERNALSYM WINHTTP_OPTION_WORKER_THREAD_COUNT}
  WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT       = 81;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT}
  WINHTTP_OPTION_PASSPORT_COBRANDING_URL        = 82;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_COBRANDING_URL}
  WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH        = 83;
  {$EXTERNALSYM WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH}
  WINHTTP_OPTION_SECURE_PROTOCOLS               = 84;
  {$EXTERNALSYM WINHTTP_OPTION_SECURE_PROTOCOLS}
  WINHTTP_OPTION_ENABLETRACING                  = 85;
  {$EXTERNALSYM WINHTTP_OPTION_ENABLETRACING}
  WINHTTP_OPTION_PASSPORT_SIGN_OUT              = 86;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_SIGN_OUT}
  WINHTTP_OPTION_PASSPORT_RETURN_URL            = 87;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_RETURN_URL}
  WINHTTP_OPTION_REDIRECT_POLICY                = 88;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY}
  WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS   = 89;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS}
  WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE       = 90;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE}
  WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE       = 91;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE}
  WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE        = 92;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE}
  WINHTTP_OPTION_CONNECTION_INFO                = 93;
  {$EXTERNALSYM WINHTTP_OPTION_CONNECTION_INFO}
  WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST        = 94;
  {$EXTERNALSYM WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST}
  WINHTTP_OPTION_SPN                            = 96;
  {$EXTERNALSYM WINHTTP_OPTION_SPN}

  WINHTTP_OPTION_GLOBAL_PROXY_CREDS             = 97;
  {$EXTERNALSYM WINHTTP_OPTION_GLOBAL_PROXY_CREDS}
  WINHTTP_OPTION_GLOBAL_SERVER_CREDS            = 98;
  {$EXTERNALSYM WINHTTP_OPTION_GLOBAL_SERVER_CREDS}

  WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT            = 99;
  {$EXTERNALSYM WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT}
  WINHTTP_OPTION_REJECT_USERPWD_IN_URL          = 100;
  {$EXTERNALSYM WINHTTP_OPTION_REJECT_USERPWD_IN_URL}
  WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS  = 101;
  {$EXTERNALSYM WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS}


  WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE = 103;
  {$EXTERNALSYM WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE}
  WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE      = 104;
  {$EXTERNALSYM WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE}


  WINHTTP_OPTION_SERVER_SPN_USED                = 106;
  {$EXTERNALSYM WINHTTP_OPTION_SERVER_SPN_USED}
  WINHTTP_OPTION_PROXY_SPN_USED                 = 107;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY_SPN_USED}

  WINHTTP_OPTION_SERVER_CBT                     = 108;
  {$EXTERNALSYM WINHTTP_OPTION_SERVER_CBT}


  WINHTTP_OPTION_UNSAFE_HEADER_PARSING          = 110;
  {$EXTERNALSYM WINHTTP_OPTION_UNSAFE_HEADER_PARSING}
  WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS = 111;
  {$EXTERNALSYM WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS}


  WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET          = 114;
  {$EXTERNALSYM WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET}
  WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT       = 115;
  {$EXTERNALSYM WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT}
  WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL  = 116;
  {$EXTERNALSYM WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL}

  WINHTTP_LAST_OPTION                           = WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL;
  {$EXTERNALSYM WINHTTP_LAST_OPTION}

  WINHTTP_OPTION_USERNAME                      = $1000;
  {$EXTERNALSYM WINHTTP_OPTION_USERNAME}
  WINHTTP_OPTION_PASSWORD                      = $1001;
  {$EXTERNALSYM WINHTTP_OPTION_PASSWORD}
  WINHTTP_OPTION_PROXY_USERNAME                = $1002;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY_USERNAME}
  WINHTTP_OPTION_PROXY_PASSWORD                = $1003;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY_PASSWORD}


// manifest value for WINHTTP_OPTION_MAX_CONNS_PER_SERVER and WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER
  WINHTTP_CONNS_PER_SERVER_UNLIMITED   = $FFFFFFFF;
  {$EXTERNALSYM WINHTTP_CONNS_PER_SERVER_UNLIMITED}


// values for WINHTTP_OPTION_AUTOLOGON_POLICY
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM  = 0;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM}
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW     = 1;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW}
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH    = 2;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH}

  WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT      = WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT}

// values for WINHTTP_OPTION_REDIRECT_POLICY
  WINHTTP_OPTION_REDIRECT_POLICY_NEVER                      = 0;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_NEVER}
  WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP     = 1;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP}
  WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS                     = 2;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS}

  WINHTTP_OPTION_REDIRECT_POLICY_LAST          = WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_LAST}
  WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT       = WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT}

  WINHTTP_DISABLE_PASSPORT_AUTH    = $00000000;
  {$EXTERNALSYM WINHTTP_DISABLE_PASSPORT_AUTH}
  WINHTTP_ENABLE_PASSPORT_AUTH     = $10000000;
  {$EXTERNALSYM WINHTTP_ENABLE_PASSPORT_AUTH}
  WINHTTP_DISABLE_PASSPORT_KEYRING = $20000000;
  {$EXTERNALSYM WINHTTP_DISABLE_PASSPORT_KEYRING}
  WINHTTP_ENABLE_PASSPORT_KEYRING  = $40000000;
  {$EXTERNALSYM WINHTTP_ENABLE_PASSPORT_KEYRING}


// values for WINHTTP_OPTION_DISABLE_FEATURE
  WINHTTP_DISABLE_COOKIES                 = $00000001;
  {$EXTERNALSYM WINHTTP_DISABLE_COOKIES}
  WINHTTP_DISABLE_REDIRECTS               = $00000002;
  {$EXTERNALSYM WINHTTP_DISABLE_REDIRECTS}
  WINHTTP_DISABLE_AUTHENTICATION          = $00000004;
  {$EXTERNALSYM WINHTTP_DISABLE_AUTHENTICATION}
  WINHTTP_DISABLE_KEEP_ALIVE              = $00000008;
  {$EXTERNALSYM WINHTTP_DISABLE_KEEP_ALIVE}

// values for WINHTTP_OPTION_ENABLE_FEATURE
  WINHTTP_ENABLE_SSL_REVOCATION           = $00000001;
  {$EXTERNALSYM WINHTTP_ENABLE_SSL_REVOCATION}
  WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = $00000002;
  {$EXTERNALSYM WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION}

// values for WINHTTP_OPTION_SPN
  WINHTTP_DISABLE_SPN_SERVER_PORT         = $00000000;
  {$EXTERNALSYM WINHTTP_DISABLE_SPN_SERVER_PORT}
  WINHTTP_ENABLE_SPN_SERVER_PORT          = $00000001;
  {$EXTERNALSYM WINHTTP_ENABLE_SPN_SERVER_PORT}
  WINHTTP_OPTION_SPN_MASK                 = WINHTTP_ENABLE_SPN_SERVER_PORT;
  {$EXTERNALSYM WINHTTP_OPTION_SPN_MASK}

type
  PWinHttpCreds = ^TWinHttpCreds;
  tagWINHTTP_CREDS = record
    lpszUserName: LPSTR;
    lpszPassword: LPSTR;
    lpszRealm: LPSTR;
    dwAuthScheme: DWORD;
    lpszHostName: LPSTR;
    dwPort: DWORD;
  end;
  {$EXTERNALSYM tagWINHTTP_CREDS}
  WINHTTP_CREDS = tagWINHTTP_CREDS;
  {$EXTERNALSYM WINHTTP_CREDS}
  PWINHTTP_CREDS = PWinHttpCreds;
  {$EXTERNALSYM PWINHTTP_CREDS}
  TWinHttpCreds = tagWINHTTP_CREDS;

// structure for WINHTTP_OPTION_GLOBAL_SERVER_CREDS and
// WINHTTP_OPTION_GLOBAL_PROXY_CREDS
  PWinHttpCredsEx = ^TWinHttpCredsEx;
  tagWINHTTP_CREDS_EX = record
    lpszUserName: LPSTR;
    lpszPassword: LPSTR;
    lpszRealm: LPSTR;
    dwAuthScheme: DWORD;
    lpszHostName: DWORD;
    dwPort: DWORD;
    lpszUrl: LPSTR;
  end;
  {$EXTERNALSYM tagWINHTTP_CREDS_EX}
  WINHTTP_CREDS_EX = tagWINHTTP_CREDS_EX;
  {$EXTERNALSYM WINHTTP_CREDS_EX}
  PWINHTTP_CREDS_EX = PWinHttpCredsEx;
  {$EXTERNALSYM PWINHTTP_CREDS_EX}
  TWinHttpCredsEx = tagWINHTTP_CREDS_EX;

//
// winhttp handle types
//
const
  WINHTTP_HANDLE_TYPE_SESSION                = 1;
  {$EXTERNALSYM WINHTTP_HANDLE_TYPE_SESSION}
  WINHTTP_HANDLE_TYPE_CONNECT                = 2;
  {$EXTERNALSYM WINHTTP_HANDLE_TYPE_CONNECT}
  WINHTTP_HANDLE_TYPE_REQUEST                = 3;
  {$EXTERNALSYM WINHTTP_HANDLE_TYPE_REQUEST}

//
// values for auth schemes
//
  WINHTTP_AUTH_SCHEME_BASIC     = $00000001;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_BASIC}
  WINHTTP_AUTH_SCHEME_NTLM      = $00000002;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_NTLM}
  WINHTTP_AUTH_SCHEME_PASSPORT  = $00000004;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_PASSPORT}
  WINHTTP_AUTH_SCHEME_DIGEST    = $00000008;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_DIGEST}
  WINHTTP_AUTH_SCHEME_NEGOTIATE = $00000010;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_NEGOTIATE}

// WinHttp supported Authentication Targets

  WINHTTP_AUTH_TARGET_SERVER = $00000000;
  {$EXTERNALSYM WINHTTP_AUTH_TARGET_SERVER}
  WINHTTP_AUTH_TARGET_PROXY  = $00000001;
  {$EXTERNALSYM WINHTTP_AUTH_TARGET_PROXY}

//
// values for WINHTTP_OPTION_SECURITY_FLAGS
//

// query only
  SECURITY_FLAG_SECURE                  = $00000001; // can query only
  {$EXTERNALSYM SECURITY_FLAG_SECURE}
  SECURITY_FLAG_STRENGTH_WEAK           = $10000000;
  {$EXTERNALSYM SECURITY_FLAG_STRENGTH_WEAK}
  SECURITY_FLAG_STRENGTH_MEDIUM         = $40000000;
  {$EXTERNALSYM SECURITY_FLAG_STRENGTH_MEDIUM}
  SECURITY_FLAG_STRENGTH_STRONG         = $20000000;
  {$EXTERNALSYM SECURITY_FLAG_STRENGTH_STRONG}



// Secure connection error status flags
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED        = $00000001;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED}
  WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT           = $00000002;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED           = $00000004;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED}
  WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA             = $00000008;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID        = $00000010;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID      = $00000020;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE       = $00000040;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE}
  WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR = $80000000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR}


  WINHTTP_FLAG_SECURE_PROTOCOL_SSL2   = $00000008;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_SSL2}
  WINHTTP_FLAG_SECURE_PROTOCOL_SSL3   = $00000020;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_SSL3}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1   = $00000080;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = $00000200;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = $00000800;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2}
  WINHTTP_FLAG_SECURE_PROTOCOL_ALL    = (WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 or
                                         WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 or
                                         WINHTTP_FLAG_SECURE_PROTOCOL_TLS1);
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_ALL}


//
// callback function for WinHttpSetStatusCallback
//
type
  PFnWinHttpStatusCallback = ^TFnWinHttpStatusCallback;
  WINHTTP_STATUS_CALLBACK = procedure(
    hInternet: HINTERNET;
    dwContext: DWORD_PTR;
    dwInternetStatus: DWORD;
    lpvStatusInformation: Pointer;
    dwStatusInformationLength: DWORD); stdcall;
  {$EXTERNALSYM WINHTTP_STATUS_CALLBACK}
  TFnWinHttpStatusCallback = WINHTTP_STATUS_CALLBACK;

//
// status manifests for WinHttp status callback
//
const
  WINHTTP_CALLBACK_STATUS_RESOLVING_NAME          = $00000001;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_RESOLVING_NAME}
  WINHTTP_CALLBACK_STATUS_NAME_RESOLVED           = $00000002;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_NAME_RESOLVED}
  WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER    = $00000004;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER}
  WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER     = $00000008;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER}
  WINHTTP_CALLBACK_STATUS_SENDING_REQUEST         = $00000010;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SENDING_REQUEST}
  WINHTTP_CALLBACK_STATUS_REQUEST_SENT            = $00000020;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_REQUEST_SENT}
  WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE      = $00000040;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE}
  WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED       = $00000080;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED}
  WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION      = $00000100;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION}
  WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED       = $00000200;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED}
  WINHTTP_CALLBACK_STATUS_HANDLE_CREATED          = $00000400;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_HANDLE_CREATED}
  WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING          = $00000800;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING}
  WINHTTP_CALLBACK_STATUS_DETECTING_PROXY         = $00001000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_DETECTING_PROXY}
  WINHTTP_CALLBACK_STATUS_REDIRECT                = $00004000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_REDIRECT}
  WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE   = $00008000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE}
  WINHTTP_CALLBACK_STATUS_SECURE_FAILURE          = $00010000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SECURE_FAILURE}
  WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE       = $00020000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE}
  WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE          = $00040000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE}
  WINHTTP_CALLBACK_STATUS_READ_COMPLETE           = $00080000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_READ_COMPLETE}
  WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE          = $00100000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE}
  WINHTTP_CALLBACK_STATUS_REQUEST_ERROR           = $00200000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_REQUEST_ERROR}
  WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE    = $00400000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE}


  WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE = $01000000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE}
  WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE          = $02000000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE}
  WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE       = $04000000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE}

// API Enums for WINHTTP_CALLBACK_STATUS_REQUEST_ERROR:
  API_RECEIVE_RESPONSE         = (1);
  {$EXTERNALSYM API_RECEIVE_RESPONSE}
  API_QUERY_DATA_AVAILABLE     = (2);
  {$EXTERNALSYM API_QUERY_DATA_AVAILABLE}
  API_READ_DATA                = (3);
  {$EXTERNALSYM API_READ_DATA}
  API_WRITE_DATA               = (4);
  {$EXTERNALSYM API_WRITE_DATA}
  API_SEND_REQUEST             = (5);
  {$EXTERNALSYM API_SEND_REQUEST}
  API_GET_PROXY_FOR_URL        = (6);
  {$EXTERNALSYM API_GET_PROXY_FOR_URL}

  WINHTTP_CALLBACK_FLAG_RESOLVE_NAME             = (WINHTTP_CALLBACK_STATUS_RESOLVING_NAME or WINHTTP_CALLBACK_STATUS_NAME_RESOLVED);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_RESOLVE_NAME}
  WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER        = (WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER or WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER}
  WINHTTP_CALLBACK_FLAG_SEND_REQUEST             = (WINHTTP_CALLBACK_STATUS_SENDING_REQUEST or WINHTTP_CALLBACK_STATUS_REQUEST_SENT);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_SEND_REQUEST}
  WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE         = (WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE or WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE}
  WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION         = (WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION or WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION}
  WINHTTP_CALLBACK_FLAG_HANDLES                  = (WINHTTP_CALLBACK_STATUS_HANDLE_CREATED or WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_HANDLES}
  WINHTTP_CALLBACK_FLAG_DETECTING_PROXY          = WINHTTP_CALLBACK_STATUS_DETECTING_PROXY;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_DETECTING_PROXY}
  WINHTTP_CALLBACK_FLAG_REDIRECT                 = WINHTTP_CALLBACK_STATUS_REDIRECT;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_REDIRECT}
  WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE    = WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE}
  WINHTTP_CALLBACK_FLAG_SECURE_FAILURE           = WINHTTP_CALLBACK_STATUS_SECURE_FAILURE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_SECURE_FAILURE}
  WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE     = WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE}
  WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE        = WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE}
  WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE           = WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE}
  WINHTTP_CALLBACK_FLAG_READ_COMPLETE            = WINHTTP_CALLBACK_STATUS_READ_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_READ_COMPLETE}
  WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE           = WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE}
  WINHTTP_CALLBACK_FLAG_REQUEST_ERROR            = WINHTTP_CALLBACK_STATUS_REQUEST_ERROR;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_REQUEST_ERROR}

  WINHTTP_CALLBACK_FLAG_GETPROXYFORURL_COMPLETE  = WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_GETPROXYFORURL_COMPLETE}

  WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS          = (WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE or
                                                    WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE or
                                                    WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE or
                                                    WINHTTP_CALLBACK_STATUS_READ_COMPLETE or
                                                    WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE or
                                                    WINHTTP_CALLBACK_STATUS_REQUEST_ERROR or
                                                    WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS}
  WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS        = $ffffffff;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS}

//
// if the following value is returned by WinHttpSetStatusCallback, then
// probably an invalid (non-code) address was supplied for the callback
//

  WINHTTP_INVALID_STATUS_CALLBACK      = Pointer(-1);
  {$EXTERNALSYM WINHTTP_INVALID_STATUS_CALLBACK}

//
// WinHttpQueryHeaders info levels. Generally, there is one info level
// for each potential RFC822/HTTP/MIME header that an HTTP server
// may send as part of a request response.
//
// The WINHTTP_QUERY_RAW_HEADERS info level is provided for clients
// that choose to perform their own header parsing.
//


  WINHTTP_QUERY_MIME_VERSION               = 0;
  {$EXTERNALSYM WINHTTP_QUERY_MIME_VERSION}
  WINHTTP_QUERY_CONTENT_TYPE               = 1;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_TYPE}
  WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING  = 2;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING}
  WINHTTP_QUERY_CONTENT_ID                 = 3;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_ID}
  WINHTTP_QUERY_CONTENT_DESCRIPTION        = 4;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_DESCRIPTION}
  WINHTTP_QUERY_CONTENT_LENGTH             = 5;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LENGTH}
  WINHTTP_QUERY_CONTENT_LANGUAGE           = 6;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LANGUAGE}
  WINHTTP_QUERY_ALLOW                      = 7;
  {$EXTERNALSYM WINHTTP_QUERY_ALLOW}
  WINHTTP_QUERY_PUBLIC                     = 8;
  {$EXTERNALSYM WINHTTP_QUERY_PUBLIC}
  WINHTTP_QUERY_DATE                       = 9;
  {$EXTERNALSYM WINHTTP_QUERY_DATE}
  WINHTTP_QUERY_EXPIRES                    = 10;
  {$EXTERNALSYM WINHTTP_QUERY_EXPIRES}
  WINHTTP_QUERY_LAST_MODIFIED              = 11;
  {$EXTERNALSYM WINHTTP_QUERY_LAST_MODIFIED}
  WINHTTP_QUERY_MESSAGE_ID                 = 12;
  {$EXTERNALSYM WINHTTP_QUERY_MESSAGE_ID}
  WINHTTP_QUERY_URI                        = 13;
  {$EXTERNALSYM WINHTTP_QUERY_URI}
  WINHTTP_QUERY_DERIVED_FROM               = 14;
  {$EXTERNALSYM WINHTTP_QUERY_DERIVED_FROM}
  WINHTTP_QUERY_COST                       = 15;
  {$EXTERNALSYM WINHTTP_QUERY_COST}
  WINHTTP_QUERY_LINK                       = 16;
  {$EXTERNALSYM WINHTTP_QUERY_LINK}
  WINHTTP_QUERY_PRAGMA                     = 17;
  {$EXTERNALSYM WINHTTP_QUERY_PRAGMA}
  WINHTTP_QUERY_VERSION                    = 18;  // special: part of status line
  {$EXTERNALSYM WINHTTP_QUERY_VERSION}
  WINHTTP_QUERY_STATUS_CODE                = 19;  // special: part of status line
  {$EXTERNALSYM WINHTTP_QUERY_STATUS_CODE}
  WINHTTP_QUERY_STATUS_TEXT                = 20;  // special: part of status line
  {$EXTERNALSYM WINHTTP_QUERY_STATUS_TEXT}
  WINHTTP_QUERY_RAW_HEADERS                = 21;  // special: all headers as ASCIIZ
  {$EXTERNALSYM WINHTTP_QUERY_RAW_HEADERS}
  WINHTTP_QUERY_RAW_HEADERS_CRLF           = 22;  // special: all headers
  {$EXTERNALSYM WINHTTP_QUERY_RAW_HEADERS_CRLF}
  WINHTTP_QUERY_CONNECTION                 = 23;
  {$EXTERNALSYM WINHTTP_QUERY_CONNECTION}
  WINHTTP_QUERY_ACCEPT                     = 24;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT}
  WINHTTP_QUERY_ACCEPT_CHARSET             = 25;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_CHARSET}
  WINHTTP_QUERY_ACCEPT_ENCODING            = 26;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_ENCODING}
  WINHTTP_QUERY_ACCEPT_LANGUAGE            = 27;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_LANGUAGE}
  WINHTTP_QUERY_AUTHORIZATION              = 28;
  {$EXTERNALSYM WINHTTP_QUERY_AUTHORIZATION}
  WINHTTP_QUERY_CONTENT_ENCODING           = 29;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_ENCODING}
  WINHTTP_QUERY_FORWARDED                  = 30;
  {$EXTERNALSYM WINHTTP_QUERY_FORWARDED}
  WINHTTP_QUERY_FROM                       = 31;
  {$EXTERNALSYM WINHTTP_QUERY_FROM}
  WINHTTP_QUERY_IF_MODIFIED_SINCE          = 32;
  {$EXTERNALSYM WINHTTP_QUERY_IF_MODIFIED_SINCE}
  WINHTTP_QUERY_LOCATION                   = 33;
  {$EXTERNALSYM WINHTTP_QUERY_LOCATION}
  WINHTTP_QUERY_ORIG_URI                   = 34;
  {$EXTERNALSYM WINHTTP_QUERY_ORIG_URI}
  WINHTTP_QUERY_REFERER                    = 35;
  {$EXTERNALSYM WINHTTP_QUERY_REFERER}
  WINHTTP_QUERY_RETRY_AFTER                = 36;
  {$EXTERNALSYM WINHTTP_QUERY_RETRY_AFTER}
  WINHTTP_QUERY_SERVER                     = 37;
  {$EXTERNALSYM WINHTTP_QUERY_SERVER}
  WINHTTP_QUERY_TITLE                      = 38;
  {$EXTERNALSYM WINHTTP_QUERY_TITLE}
  WINHTTP_QUERY_USER_AGENT                 = 39;
  {$EXTERNALSYM WINHTTP_QUERY_USER_AGENT}
  WINHTTP_QUERY_WWW_AUTHENTICATE           = 40;
  {$EXTERNALSYM WINHTTP_QUERY_WWW_AUTHENTICATE}
  WINHTTP_QUERY_PROXY_AUTHENTICATE         = 41;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_AUTHENTICATE}
  WINHTTP_QUERY_ACCEPT_RANGES              = 42;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_RANGES}
  WINHTTP_QUERY_SET_COOKIE                 = 43;
  {$EXTERNALSYM WINHTTP_QUERY_SET_COOKIE}
  WINHTTP_QUERY_COOKIE                     = 44;
  {$EXTERNALSYM WINHTTP_QUERY_COOKIE}
  WINHTTP_QUERY_REQUEST_METHOD             = 45;  // special: GET/POST etc.
  {$EXTERNALSYM WINHTTP_QUERY_REQUEST_METHOD}
  WINHTTP_QUERY_REFRESH                    = 46;
  {$EXTERNALSYM WINHTTP_QUERY_REFRESH}
  WINHTTP_QUERY_CONTENT_DISPOSITION        = 47;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_DISPOSITION}

//
// HTTP 1.1 defined headers
//

  WINHTTP_QUERY_AGE                        = 48;
  {$EXTERNALSYM WINHTTP_QUERY_AGE}
  WINHTTP_QUERY_CACHE_CONTROL              = 49;
  {$EXTERNALSYM WINHTTP_QUERY_CACHE_CONTROL}
  WINHTTP_QUERY_CONTENT_BASE               = 50;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_BASE}
  WINHTTP_QUERY_CONTENT_LOCATION           = 51;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LOCATION}
  WINHTTP_QUERY_CONTENT_MD5                = 52;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_MD5}
  WINHTTP_QUERY_CONTENT_RANGE              = 53;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_RANGE}
  WINHTTP_QUERY_ETAG                       = 54;
  {$EXTERNALSYM WINHTTP_QUERY_ETAG}
  WINHTTP_QUERY_HOST                       = 55;
  {$EXTERNALSYM WINHTTP_QUERY_HOST}
  WINHTTP_QUERY_IF_MATCH                   = 56;
  {$EXTERNALSYM WINHTTP_QUERY_IF_MATCH}
  WINHTTP_QUERY_IF_NONE_MATCH              = 57;
  {$EXTERNALSYM WINHTTP_QUERY_IF_NONE_MATCH}
  WINHTTP_QUERY_IF_RANGE                   = 58;
  {$EXTERNALSYM WINHTTP_QUERY_IF_RANGE}
  WINHTTP_QUERY_IF_UNMODIFIED_SINCE        = 59;
  {$EXTERNALSYM WINHTTP_QUERY_IF_UNMODIFIED_SINCE}
  WINHTTP_QUERY_MAX_FORWARDS               = 60;
  {$EXTERNALSYM WINHTTP_QUERY_MAX_FORWARDS}
  WINHTTP_QUERY_PROXY_AUTHORIZATION        = 61;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_AUTHORIZATION}
  WINHTTP_QUERY_RANGE                      = 62;
  {$EXTERNALSYM WINHTTP_QUERY_RANGE}
  WINHTTP_QUERY_TRANSFER_ENCODING          = 63;
  {$EXTERNALSYM WINHTTP_QUERY_TRANSFER_ENCODING}
  WINHTTP_QUERY_UPGRADE                    = 64;
  {$EXTERNALSYM WINHTTP_QUERY_UPGRADE}
  WINHTTP_QUERY_VARY                       = 65;
  {$EXTERNALSYM WINHTTP_QUERY_VARY}
  WINHTTP_QUERY_VIA                        = 66;
  {$EXTERNALSYM WINHTTP_QUERY_VIA}
  WINHTTP_QUERY_WARNING                    = 67;
  {$EXTERNALSYM WINHTTP_QUERY_WARNING}
  WINHTTP_QUERY_EXPECT                     = 68;
  {$EXTERNALSYM WINHTTP_QUERY_EXPECT}
  WINHTTP_QUERY_PROXY_CONNECTION           = 69;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_CONNECTION}
  WINHTTP_QUERY_UNLESS_MODIFIED_SINCE      = 70;
  {$EXTERNALSYM WINHTTP_QUERY_UNLESS_MODIFIED_SINCE}



  WINHTTP_QUERY_PROXY_SUPPORT              = 75;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_SUPPORT}
  WINHTTP_QUERY_AUTHENTICATION_INFO        = 76;
  {$EXTERNALSYM WINHTTP_QUERY_AUTHENTICATION_INFO}
  WINHTTP_QUERY_PASSPORT_URLS              = 77;
  {$EXTERNALSYM WINHTTP_QUERY_PASSPORT_URLS}
  WINHTTP_QUERY_PASSPORT_CONFIG            = 78;
  {$EXTERNALSYM WINHTTP_QUERY_PASSPORT_CONFIG}

  WINHTTP_QUERY_MAX                        = 78;
  {$EXTERNALSYM WINHTTP_QUERY_MAX}

//
// WINHTTP_QUERY_CUSTOM - if this special value is supplied as the dwInfoLevel
// parameter of WinHttpQueryHeaders() then the lpBuffer parameter contains the name
// of the header we are to query
//

  WINHTTP_QUERY_CUSTOM                     = 65535;
  {$EXTERNALSYM WINHTTP_QUERY_CUSTOM}

//
// WINHTTP_QUERY_FLAG_REQUEST_HEADERS - if this bit is set in the dwInfoLevel
// parameter of WinHttpQueryHeaders() then the request headers will be queried for the
// request information
//

  WINHTTP_QUERY_FLAG_REQUEST_HEADERS       = $80000000;
  {$EXTERNALSYM WINHTTP_QUERY_FLAG_REQUEST_HEADERS}

//
// WINHTTP_QUERY_FLAG_SYSTEMTIME - if this bit is set in the dwInfoLevel parameter
// of WinHttpQueryHeaders() AND the header being queried contains date information,
// e.g. the "Expires:" header then lpBuffer will contain a SYSTEMTIME structure
// containing the date and time information converted from the header string
//

  WINHTTP_QUERY_FLAG_SYSTEMTIME            = $40000000;
  {$EXTERNALSYM WINHTTP_QUERY_FLAG_SYSTEMTIME}

//
// WINHTTP_QUERY_FLAG_NUMBER - if this bit is set in the dwInfoLevel parameter of
// HttpQueryHeader(), then the value of the header will be converted to a number
// before being returned to the caller, if applicable
//

  WINHTTP_QUERY_FLAG_NUMBER                = $20000000;
  {$EXTERNALSYM WINHTTP_QUERY_FLAG_NUMBER}


//
// HTTP Response Status Codes:
//

  HTTP_STATUS_CONTINUE            = 100; // OK to continue with request
  {$EXTERNALSYM HTTP_STATUS_CONTINUE}
  HTTP_STATUS_SWITCH_PROTOCOLS    = 101; // server has switched protocols in upgrade header
  {$EXTERNALSYM HTTP_STATUS_SWITCH_PROTOCOLS}

  HTTP_STATUS_OK                  = 200; // request completed
  {$EXTERNALSYM HTTP_STATUS_OK}
  HTTP_STATUS_CREATED             = 201; // object created, reason = new URI
  {$EXTERNALSYM HTTP_STATUS_CREATED}
  HTTP_STATUS_ACCEPTED            = 202; // async completion (TBS)
  {$EXTERNALSYM HTTP_STATUS_ACCEPTED}
  HTTP_STATUS_PARTIAL             = 203; // partial completion
  {$EXTERNALSYM HTTP_STATUS_PARTIAL}
  HTTP_STATUS_NO_CONTENT          = 204; // no info to return
  {$EXTERNALSYM HTTP_STATUS_NO_CONTENT}
  HTTP_STATUS_RESET_CONTENT       = 205; // request completed, but clear form
  {$EXTERNALSYM HTTP_STATUS_RESET_CONTENT}
  HTTP_STATUS_PARTIAL_CONTENT     = 206; // partial GET fulfilled
  {$EXTERNALSYM HTTP_STATUS_PARTIAL_CONTENT}
  HTTP_STATUS_WEBDAV_MULTI_STATUS = 207; // WebDAV Multi-Status
  {$EXTERNALSYM HTTP_STATUS_WEBDAV_MULTI_STATUS}

  HTTP_STATUS_AMBIGUOUS           = 300; // server couldn't decide what to return
  {$EXTERNALSYM HTTP_STATUS_AMBIGUOUS}
  HTTP_STATUS_MOVED               = 301; // object permanently moved
  {$EXTERNALSYM HTTP_STATUS_MOVED}
  HTTP_STATUS_REDIRECT            = 302; // object temporarily moved
  {$EXTERNALSYM HTTP_STATUS_REDIRECT}
  HTTP_STATUS_REDIRECT_METHOD     = 303; // redirection w/ new access method
  {$EXTERNALSYM HTTP_STATUS_REDIRECT_METHOD}
  HTTP_STATUS_NOT_MODIFIED        = 304; // if-modified-since was not modified
  {$EXTERNALSYM HTTP_STATUS_NOT_MODIFIED}
  HTTP_STATUS_USE_PROXY           = 305; // redirection to proxy, location header specifies proxy to use
  {$EXTERNALSYM HTTP_STATUS_USE_PROXY}
  HTTP_STATUS_REDIRECT_KEEP_VERB  = 307; // HTTP/1.1: keep same verb
  {$EXTERNALSYM HTTP_STATUS_REDIRECT_KEEP_VERB}

  HTTP_STATUS_BAD_REQUEST         = 400; // invalid syntax
  {$EXTERNALSYM HTTP_STATUS_BAD_REQUEST}
  HTTP_STATUS_DENIED              = 401; // access denied
  {$EXTERNALSYM HTTP_STATUS_DENIED}
  HTTP_STATUS_PAYMENT_REQ         = 402; // payment required
  {$EXTERNALSYM HTTP_STATUS_PAYMENT_REQ}
  HTTP_STATUS_FORBIDDEN           = 403; // request forbidden
  {$EXTERNALSYM HTTP_STATUS_FORBIDDEN}
  HTTP_STATUS_NOT_FOUND           = 404; // object not found
  {$EXTERNALSYM HTTP_STATUS_NOT_FOUND}
  HTTP_STATUS_BAD_METHOD          = 405; // method is not allowed
  {$EXTERNALSYM HTTP_STATUS_BAD_METHOD}
  HTTP_STATUS_NONE_ACCEPTABLE     = 406; // no response acceptable to client found
  {$EXTERNALSYM HTTP_STATUS_NONE_ACCEPTABLE}
  HTTP_STATUS_PROXY_AUTH_REQ      = 407; // proxy authentication required
  {$EXTERNALSYM HTTP_STATUS_PROXY_AUTH_REQ}
  HTTP_STATUS_REQUEST_TIMEOUT     = 408; // server timed out waiting for request
  {$EXTERNALSYM HTTP_STATUS_REQUEST_TIMEOUT}
  HTTP_STATUS_CONFLICT            = 409; // user should resubmit with more info
  {$EXTERNALSYM HTTP_STATUS_CONFLICT}
  HTTP_STATUS_GONE                = 410; // the resource is no longer available
  {$EXTERNALSYM HTTP_STATUS_GONE}
  HTTP_STATUS_LENGTH_REQUIRED     = 411; // the server refused to accept request w/o a length
  {$EXTERNALSYM HTTP_STATUS_LENGTH_REQUIRED}
  HTTP_STATUS_PRECOND_FAILED      = 412; // precondition given in request failed
  {$EXTERNALSYM HTTP_STATUS_PRECOND_FAILED}
  HTTP_STATUS_REQUEST_TOO_LARGE   = 413; // request entity was too large
  {$EXTERNALSYM HTTP_STATUS_REQUEST_TOO_LARGE}
  HTTP_STATUS_URI_TOO_LONG        = 414; // request URI too long
  {$EXTERNALSYM HTTP_STATUS_URI_TOO_LONG}
  HTTP_STATUS_UNSUPPORTED_MEDIA   = 415; // unsupported media type
  {$EXTERNALSYM HTTP_STATUS_UNSUPPORTED_MEDIA}
  HTTP_STATUS_RETRY_WITH          = 449; // retry after doing the appropriate action.
  {$EXTERNALSYM HTTP_STATUS_RETRY_WITH}

  HTTP_STATUS_SERVER_ERROR        = 500; // internal server error
  {$EXTERNALSYM HTTP_STATUS_SERVER_ERROR}
  HTTP_STATUS_NOT_SUPPORTED       = 501; // required not supported
  {$EXTERNALSYM HTTP_STATUS_NOT_SUPPORTED}
  HTTP_STATUS_BAD_GATEWAY         = 502; // error response received from gateway
  {$EXTERNALSYM HTTP_STATUS_BAD_GATEWAY}
  HTTP_STATUS_SERVICE_UNAVAIL     = 503; // temporarily overloaded
  {$EXTERNALSYM HTTP_STATUS_SERVICE_UNAVAIL}
  HTTP_STATUS_GATEWAY_TIMEOUT     = 504; // timed out waiting for gateway
  {$EXTERNALSYM HTTP_STATUS_GATEWAY_TIMEOUT}
  HTTP_STATUS_VERSION_NOT_SUP     = 505; // HTTP version not supported
  {$EXTERNALSYM HTTP_STATUS_VERSION_NOT_SUP}

  HTTP_STATUS_FIRST               = HTTP_STATUS_CONTINUE;
  {$EXTERNALSYM HTTP_STATUS_FIRST}
  HTTP_STATUS_LAST                = HTTP_STATUS_VERSION_NOT_SUP;
  {$EXTERNALSYM HTTP_STATUS_LAST}

//
// flags for CrackUrl() and CombineUrl()
//
const
  ICU_NO_ENCODE          = $20000000;  // Don't convert unsafe characters to escape sequence
  {$EXTERNALSYM ICU_NO_ENCODE}
  ICU_DECODE             = $10000000;  // Convert %XX escape sequences to characters
  {$EXTERNALSYM ICU_DECODE}
  ICU_NO_META            = $08000000;  // Don't convert .. etc. meta path sequences
  {$EXTERNALSYM ICU_NO_META}
  ICU_ENCODE_SPACES_ONLY = $04000000;  // Encode spaces only
  {$EXTERNALSYM ICU_ENCODE_SPACES_ONLY}
  ICU_BROWSER_MODE       = $02000000;  // Special encode/decode rules for browser
  {$EXTERNALSYM ICU_BROWSER_MODE}
  ICU_ENCODE_PERCENT     = $00001000;  // Encode any percent (ASCII25)
  {$EXTERNALSYM ICU_ENCODE_PERCENT}

  // signs encountered, default is to not encode percent.

//
// flags for WinHttpCrackUrl() and WinHttpCreateUrl()
//
const
  ICU_ESCAPE           = $80000000;  // (un)escape URL characters
  {$EXTERNALSYM ICU_ESCAPE}
  ICU_ESCAPE_AUTHORITY = $00002000;  // causes InternetCreateUrlA to escape chars in authority components (user, pwd, host)
  {$EXTERNALSYM ICU_ESCAPE_AUTHORITY}
  ICU_REJECT_USERPWD   = $00004000;  // rejects usrls whick have username/pwd sections
  {$EXTERNALSYM ICU_REJECT_USERPWD}

// WinHttpOpen dwAccessType values (also for WINHTTP_PROXY_INFO::dwAccessType)
const
  WINHTTP_ACCESS_TYPE_DEFAULT_PROXY             = 0;
  {$EXTERNALSYM WINHTTP_ACCESS_TYPE_DEFAULT_PROXY}
  WINHTTP_ACCESS_TYPE_NO_PROXY                  = 1;
  {$EXTERNALSYM WINHTTP_ACCESS_TYPE_NO_PROXY}
  WINHTTP_ACCESS_TYPE_NAMED_PROXY               = 3;
  {$EXTERNALSYM WINHTTP_ACCESS_TYPE_NAMED_PROXY}

// WinHttpOpen prettifiers for optional parameters
  WINHTTP_NO_PROXY_NAME    = nil;
  {$EXTERNALSYM WINHTTP_NO_PROXY_NAME}
  WINHTTP_NO_PROXY_BYPASS  = nil;
  {$EXTERNALSYM WINHTTP_NO_PROXY_BYPASS}

  WINHTTP_NO_CLIENT_CERT_CONTEXT = nil;
  {$EXTERNALSYM WINHTTP_NO_CLIENT_CERT_CONTEXT}

// WinHttpOpenRequest prettifers for optional parameters
const
  WINHTTP_NO_REFERER            = nil;
  {$EXTERNALSYM WINHTTP_NO_REFERER}
  WINHTTP_DEFAULT_ACCEPT_TYPES  = nil;
  {$EXTERNALSYM WINHTTP_DEFAULT_ACCEPT_TYPES}

//
// values for dwModifiers parameter of WinHttpAddRequestHeaders()
//
const
  WINHTTP_ADDREQ_INDEX_MASK      = $0000FFFF;
  {$EXTERNALSYM WINHTTP_ADDREQ_INDEX_MASK}
  WINHTTP_ADDREQ_FLAGS_MASK      = $FFFF0000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAGS_MASK}

//
// WINHTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added if it doesn't
// already exist
//

  WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = $10000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_ADD_IF_NEW}

//
// WINHTTP_ADDREQ_FLAG_ADD - if WINHTTP_ADDREQ_FLAG_REPLACE is set but the header is
// not found then if this flag is set, the header is added anyway, so long as
// there is a valid header-value
//

  WINHTTP_ADDREQ_FLAG_ADD        = $20000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_ADD}

//
// WINHTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
// "Accept: text/*" and "Accept: audio/*" with this flag results in a single
// header: "Accept: text/*, audio/*"
//

  WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA     = $40000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA}
  WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = $01000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON}
  WINHTTP_ADDREQ_FLAG_COALESCE                = WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_COALESCE}

//
// WINHTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
// be supplied in the buffer. If the header to be replaced is not the first
// in a list of headers with the same name, then the relative index should be
// supplied in the low 8 bits of the dwModifiers parameter. If the header-value
// part is missing, then the header is removed
//

  WINHTTP_ADDREQ_FLAG_REPLACE  = $80000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_REPLACE}

  WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH = 0;
  {$EXTERNALSYM WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH}

// WinHttpSendRequest prettifiers for optional parameters.
const
  WINHTTP_NO_ADDITIONAL_HEADERS = nil;
  {$EXTERNALSYM WINHTTP_NO_ADDITIONAL_HEADERS}
  WINHTTP_NO_REQUEST_DATA       = nil;
  {$EXTERNALSYM WINHTTP_NO_REQUEST_DATA}

// WinHttpQueryHeaders prettifiers for optional parameters.
const
  WINHTTP_HEADER_NAME_BY_INDEX         = nil;
  {$EXTERNALSYM WINHTTP_HEADER_NAME_BY_INDEX}
  WINHTTP_NO_OUTPUT_BUFFER             = nil;
  {$EXTERNALSYM WINHTTP_NO_OUTPUT_BUFFER}
  WINHTTP_NO_HEADER_INDEX              = nil;
  {$EXTERNALSYM WINHTTP_NO_HEADER_INDEX}

type
  PWinHttpCurrentUserIEProxyConfig = ^TWinHttpCurrentUserIEProxyConfig;
  WINHTTP_CURRENT_USER_IE_PROXY_CONFIG = record
    fAutoDetect: BOOL;
    lpszAutoConfigUrl: LPWSTR;
    lpszProxy: LPWSTR;
    lpszProxyBypass: LPWSTR;
  end;
  {$EXTERNALSYM WINHTTP_CURRENT_USER_IE_PROXY_CONFIG}
  TWinHttpCurrentUserIEProxyConfig = WINHTTP_CURRENT_USER_IE_PROXY_CONFIG;

//#if !defined(_WINERROR_)

//
// WinHttp API error returns
//
const
  WINHTTP_ERROR_BASE                    = 12000;
  {$EXTERNALSYM WINHTTP_ERROR_BASE}

  ERROR_WINHTTP_OUT_OF_HANDLES          = (WINHTTP_ERROR_BASE + 1);
  {$EXTERNALSYM ERROR_WINHTTP_OUT_OF_HANDLES}
  ERROR_WINHTTP_TIMEOUT                 = (WINHTTP_ERROR_BASE + 2);
  {$EXTERNALSYM ERROR_WINHTTP_TIMEOUT}
  ERROR_WINHTTP_INTERNAL_ERROR          = (WINHTTP_ERROR_BASE + 4);
  {$EXTERNALSYM ERROR_WINHTTP_INTERNAL_ERROR}
  ERROR_WINHTTP_INVALID_URL             = (WINHTTP_ERROR_BASE + 5);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_URL}
  ERROR_WINHTTP_UNRECOGNIZED_SCHEME     = (WINHTTP_ERROR_BASE + 6);
  {$EXTERNALSYM ERROR_WINHTTP_UNRECOGNIZED_SCHEME}
  ERROR_WINHTTP_NAME_NOT_RESOLVED       = (WINHTTP_ERROR_BASE + 7);
  {$EXTERNALSYM ERROR_WINHTTP_NAME_NOT_RESOLVED}
  ERROR_WINHTTP_INVALID_OPTION          = (WINHTTP_ERROR_BASE + 9);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_OPTION}
  ERROR_WINHTTP_OPTION_NOT_SETTABLE     = (WINHTTP_ERROR_BASE + 11);
  {$EXTERNALSYM ERROR_WINHTTP_OPTION_NOT_SETTABLE}
  ERROR_WINHTTP_SHUTDOWN                = (WINHTTP_ERROR_BASE + 12);
  {$EXTERNALSYM ERROR_WINHTTP_SHUTDOWN}


  ERROR_WINHTTP_LOGIN_FAILURE           = (WINHTTP_ERROR_BASE + 15);
  {$EXTERNALSYM ERROR_WINHTTP_LOGIN_FAILURE}
  ERROR_WINHTTP_OPERATION_CANCELLED     = (WINHTTP_ERROR_BASE + 17);
  {$EXTERNALSYM ERROR_WINHTTP_OPERATION_CANCELLED}
  ERROR_WINHTTP_INCORRECT_HANDLE_TYPE   = (WINHTTP_ERROR_BASE + 18);
  {$EXTERNALSYM ERROR_WINHTTP_INCORRECT_HANDLE_TYPE}
  ERROR_WINHTTP_INCORRECT_HANDLE_STATE  = (WINHTTP_ERROR_BASE + 19);
  {$EXTERNALSYM ERROR_WINHTTP_INCORRECT_HANDLE_STATE}
  ERROR_WINHTTP_CANNOT_CONNECT          = (WINHTTP_ERROR_BASE + 29);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CONNECT}
  ERROR_WINHTTP_CONNECTION_ERROR        = (WINHTTP_ERROR_BASE + 30);
  {$EXTERNALSYM ERROR_WINHTTP_CONNECTION_ERROR}
  ERROR_WINHTTP_RESEND_REQUEST          = (WINHTTP_ERROR_BASE + 32);
  {$EXTERNALSYM ERROR_WINHTTP_RESEND_REQUEST}

  ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = (WINHTTP_ERROR_BASE + 44);
  {$EXTERNALSYM ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED}

//
// WinHttpRequest Component errors
//
  ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN = (WINHTTP_ERROR_BASE + 100);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN}
  ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND = (WINHTTP_ERROR_BASE + 101);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND}
  ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND  = (WINHTTP_ERROR_BASE + 102);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND}
  ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN  = (WINHTTP_ERROR_BASE + 103);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN}


//
// HTTP API errors
//

  ERROR_WINHTTP_HEADER_NOT_FOUND           = (WINHTTP_ERROR_BASE + 150);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_NOT_FOUND}
  ERROR_WINHTTP_INVALID_SERVER_RESPONSE    = (WINHTTP_ERROR_BASE + 152);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_SERVER_RESPONSE}
  ERROR_WINHTTP_INVALID_HEADER             = (WINHTTP_ERROR_BASE + 153);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_HEADER}
  ERROR_WINHTTP_INVALID_QUERY_REQUEST      = (WINHTTP_ERROR_BASE + 154);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_QUERY_REQUEST}
  ERROR_WINHTTP_HEADER_ALREADY_EXISTS      = (WINHTTP_ERROR_BASE + 155);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_ALREADY_EXISTS}
  ERROR_WINHTTP_REDIRECT_FAILED            = (WINHTTP_ERROR_BASE + 156);
  {$EXTERNALSYM ERROR_WINHTTP_REDIRECT_FAILED}



//
// additional WinHttp API error codes
//

//
// additional WinHttp API error codes
//
  ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR  = (WINHTTP_ERROR_BASE + 178);
  {$EXTERNALSYM ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR}
  ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT     = (WINHTTP_ERROR_BASE + 166);
  {$EXTERNALSYM ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT}
  ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = (WINHTTP_ERROR_BASE + 167);
  {$EXTERNALSYM ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT}
  ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE     = (WINHTTP_ERROR_BASE + 176);
  {$EXTERNALSYM ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE}
  ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR    = (WINHTTP_ERROR_BASE + 177);
  {$EXTERNALSYM ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR}

  ERROR_WINHTTP_NOT_INITIALIZED         = (WINHTTP_ERROR_BASE + 172);
  {$EXTERNALSYM ERROR_WINHTTP_NOT_INITIALIZED}
  ERROR_WINHTTP_SECURE_FAILURE          = (WINHTTP_ERROR_BASE + 175);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_FAILURE}


//
// Certificate security errors. These are raised only by the WinHttpRequest
// component. The WinHTTP Win32 API will return ERROR_WINHTTP_SECURE_FAILE and
// provide additional information via the WINHTTP_CALLBACK_STATUS_SECURE_FAILURE
// callback notification.
//
  ERROR_WINHTTP_SECURE_CERT_DATE_INVALID  = (WINHTTP_ERROR_BASE + 37);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_DATE_INVALID}
  ERROR_WINHTTP_SECURE_CERT_CN_INVALID    = (WINHTTP_ERROR_BASE + 38);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_CN_INVALID}
  ERROR_WINHTTP_SECURE_INVALID_CA         = (WINHTTP_ERROR_BASE + 45);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_INVALID_CA}
  ERROR_WINHTTP_SECURE_CERT_REV_FAILED    = (WINHTTP_ERROR_BASE + 57);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_REV_FAILED}
  ERROR_WINHTTP_SECURE_CHANNEL_ERROR      = (WINHTTP_ERROR_BASE + 157);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CHANNEL_ERROR}
  ERROR_WINHTTP_SECURE_INVALID_CERT       = (WINHTTP_ERROR_BASE + 169);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_INVALID_CERT}
  ERROR_WINHTTP_SECURE_CERT_REVOKED       = (WINHTTP_ERROR_BASE + 170);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_REVOKED}
  ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE   = (WINHTTP_ERROR_BASE + 179);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE}


  ERROR_WINHTTP_AUTODETECTION_FAILED                  = (WINHTTP_ERROR_BASE + 180);
  {$EXTERNALSYM ERROR_WINHTTP_AUTODETECTION_FAILED}
  ERROR_WINHTTP_HEADER_COUNT_EXCEEDED                 = (WINHTTP_ERROR_BASE + 181);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_COUNT_EXCEEDED}
  ERROR_WINHTTP_HEADER_SIZE_OVERFLOW                  = (WINHTTP_ERROR_BASE + 182);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_SIZE_OVERFLOW}
  ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 183);
  {$EXTERNALSYM ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW}
  ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW               = (WINHTTP_ERROR_BASE + 184);
  {$EXTERNALSYM ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW}
  ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY            = (WINHTTP_ERROR_BASE + 185);
  {$EXTERNALSYM ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY}
  ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY     = (WINHTTP_ERROR_BASE + 186);
  {$EXTERNALSYM ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY}

  WINHTTP_ERROR_LAST                                  = (WINHTTP_ERROR_BASE + 186);
  {$EXTERNALSYM WINHTTP_ERROR_LAST}

  WINHTTP_RESET_STATE                   = $00000001;
  {$EXTERNALSYM WINHTTP_RESET_STATE}
  WINHTTP_RESET_SWPAD_CURRENT_NETWORK   = $00000002;
  {$EXTERNALSYM WINHTTP_RESET_SWPAD_CURRENT_NETWORK}
  WINHTTP_RESET_SWPAD_ALL               = $00000004;
  {$EXTERNALSYM WINHTTP_RESET_SWPAD_ALL}
  WINHTTP_RESET_SCRIPT_CACHE            = $00000008;
  {$EXTERNALSYM WINHTTP_RESET_SCRIPT_CACHE}
  WINHTTP_RESET_ALL                     = $0000FFFF;
  {$EXTERNALSYM WINHTTP_RESET_ALL}
  WINHTTP_RESET_NOTIFY_NETWORK_CHANGED  = $00010000;
  {$EXTERNALSYM WINHTTP_RESET_NOTIFY_NETWORK_CHANGED}
  WINHTTP_RESET_OUT_OF_PROC             = $00020000;
  {$EXTERNALSYM WINHTTP_RESET_OUT_OF_PROC}

//
// prototypes
//

function WinHttpSetStatusCallback
(
  hInternet: HINTERNET;
  lpfnInternetCallback: TFNWinHttpStatusCallback;
  dwNotificationFlags: DWORD;
  dwReserved: DWORD_PTR
): TFNWinHttpStatusCallback; stdcall;
{$EXTERNALSYM WinHttpSetStatusCallback}

function WinHttpTimeFromSystemTime
(
  const pst: TSystemTime; // input GMT time
  pwszTime: LPWSTR        // output string buffer
): BOOL; stdcall;
{$EXTERNALSYM WinHttpTimeFromSystemTime}

function WinHttpTimeToSystemTime
(
  pwszTime: LPCWSTR;      // NULL terminated string
  out pst: TSystemTime    // output in GMT time
): BOOL; stdcall;
{$EXTERNALSYM WinHttpTimeToSystemTime}

function WinHttpCrackUrl
(
  pwszUrl: LPCWSTR;
  dwUrlLength: DWORD;
  dwFlags: DWORD;
  var lpUrlComponents: TURLComponents
): BOOL; stdcall;
{$EXTERNALSYM WinHttpCrackUrl}

function WinHttpCreateUrl
(
  const lpUrlComponents: TURLComponents;
  dwFlags: DWORD;
  pwszUrl: LPWSTR;
  lpdwUrlLength: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpCreateUrl}

function WinHttpCheckPlatform: BOOL; cdecl;
{$EXTERNALSYM WinHttpCheckPlatform}

function WinHttpGetDefaultProxyConfiguration(var pProxyInfo: TWinHttpProxyInfo): BOOL; stdcall;
{$EXTERNALSYM WinHttpGetDefaultProxyConfiguration}
function WinHttpSetDefaultProxyConfiguration(const pProxyInfo: TWinHttpProxyInfo): BOOL; stdcall;
{$EXTERNALSYM WinHttpSetDefaultProxyConfiguration}


function WinHttpOpen
(
  pszAgentW: LPCWSTR;
  dwAccessType: DWORD;
  pszProxyW: LPCWSTR;
  pszProxyBypassW: LPCWSTR;
  dwFlags: DWORD
): HINTERNET; stdcall;
{$EXTERNALSYM WinHttpOpen}

function WinHttpCloseHandle
(
  hInternet: HINTERNET
): BOOL; stdcall;
{$EXTERNALSYM WinHttpCloseHandle}

function WinHttpConnect
(
  hSession: HINTERNET;
  pswzServerName: LPCWSTR;
  nServerPort: INTERNET_PORT;
  dwReserved: DWORD
): HINTERNET; stdcall;
{$EXTERNALSYM WinHttpConnect}

function WinHttpReadData
(
  hRequest: HINTERNET;
  lpBuffer: LPVOID;
  dwNumberOfBytesToRead: DWORD;
  lpdwNumberOfBytesRead: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpReadData}

function WinHttpWriteData
(
  hRequest: HINTERNET;
  lpBuffer: LPCVOID;
  dwNumberOfBytesToWrite: DWORD;
  lpdwNumberOfBytesWritten: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpWriteData}

function WinHttpQueryDataAvailable
(
  hRequest: HINTERNET;
  lpdwNumberOfBytesAvailable: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpQueryDataAvailable}

function WinHttpQueryOption
(
  hInternet: HINTERNET;
  dwOption: DWORD;
  lpBuffer: LPVOID;
  lpdwBufferLength: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpQueryOption}

function WinHttpSetOption
(
  hInternet: HINTERNET;
  dwOption: DWORD;
  lpBuffer: LPVOID;
  dwBufferLength: DWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpSetOption}

function WinHttpSetTimeouts
(
  hInternet: HINTERNET;           // Session/Request handle.
  nResolveTimeout: Integer;
  nConnectTimeout: Integer;
  nSendTimeout: Integer;
  nReceiveTimeout: Integer
): BOOL; stdcall;
{$EXTERNALSYM WinHttpSetTimeouts}

//
// prototypes
//

function WinHttpOpenRequest
(
  hConnect: HINTERNET;
  pwszVerb: LPCWSTR;
  pwszObjectName: LPCWSTR;
  pwszVersion: LPCWSTR;
  pwszReferrer: LPCWSTR;
  ppwszAcceptTypes: Pointer; //LPCWSTR FAR *
  dwFlags: DWORD
): HINTERNET;  stdcall;
{$EXTERNALSYM WinHttpOpenRequest}

function WinHttpAddRequestHeaders
(
  hRequest: HINTERNET;
  pwszHeaders: LPCWSTR;
  dwHeadersLength: DWORD;
  dwModifiers: DWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpAddRequestHeaders}

function WinHttpSendRequest
(
  hRequest: HINTERNET;
  pwszHeaders: LPCWSTR;
  dwHeadersLength: DWORD;
  lpOptional: LPVOID;
  dwOptionalLength: DWORD;
  dwTotalLength: DWORD;
  dwContext: DWORD_PTR
): BOOL; stdcall;
{$EXTERNALSYM WinHttpSendRequest}

function WinHttpSetCredentials
(
  hRequest: HINTERNET;     // HINTERNET handle returned by WinHttpOpenRequest.


  AuthTargets: DWORD;      // Only WINHTTP_AUTH_TARGET_SERVER and
                           // WINHTTP_AUTH_TARGET_PROXY are supported
                           // in this version and they are mutually
                           // exclusive

  AuthScheme: DWORD;       // must be one of the supported Auth Schemes
                           // returned from WinHttpQueryAuthSchemes()

  pwszUserName: LPCWSTR;   // 1) NULL if default creds is to be used, in
                           // which case pszPassword will be ignored

  pwszPassword: LPCWSTR;   // 1) "" == Blank Password; 2)Parameter ignored
                           // if pszUserName is NULL; 3) Invalid to pass in
                           // NULL if pszUserName is not NULL
  pAuthParams: LPVOID
): BOOL; stdcall;
{$EXTERNALSYM WinHttpSetCredentials}

function WinHttpQueryAuthSchemes
(
  hRequest: HINTERNET;           // HINTERNET handle returned by WinHttpOpenRequest
  lpdwSupportedSchemes: LPDWORD; // a bitmap of available Authentication Schemes
  lpdwFirstScheme: LPDWORD;      // returns the first auth scheme returned by the server
  pdwAuthTarget: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpQueryAuthSchemes}

function WinHttpQueryAuthParams(
  hRequest: HINTERNET;        // HINTERNET handle returned by WinHttpOpenRequest
  AuthScheme: DWORD;
  pAuthParams: Pointer        // Scheme-specific Advanced auth parameters
): BOOL; stdcall;
{$EXTERNALSYM WinHttpQueryAuthParams}

function WinHttpReceiveResponse
(
  hRequest: HINTERNET;
  lpReserved: LPVOID
): BOOL; stdcall;
{$EXTERNALSYM WinHttpReceiveResponse}

function WinHttpQueryHeaders
(
  hRequest: HINTERNET;
  dwInfoLevel: DWORD;
  pwszName: LPCWSTR;
  lpBuffer: LPVOID;
  lpdwBufferLength: LPDWORD;
  lpdwIndex: LPDWORD
): BOOL; stdcall;
{$EXTERNALSYM WinHttpQueryHeaders}

function WinHttpDetectAutoProxyConfigUrl
(
  dwAutoDetectFlags: DWORD;
  out ppwszAutoConfigUrl: LPWSTR
): BOOL; stdcall;
{$EXTERNALSYM WinHttpDetectAutoProxyConfigUrl}

function WinHttpGetProxyForUrl
(
  hSession: HINTERNET;
  lpcwszUrl: LPCWSTR;
  const pAutoProxyOptions: TWinHttpAutoProxyOptions;
  out pProxyInfo: TWinHttpProxyInfo
): BOOL; stdcall;
{$EXTERNALSYM WinHttpGetProxyForUrl}

function WinHttpCreateProxyResolver
(
  hSession: HINTERNET;
  out phResolver: HINTERNET
): DWORD; stdcall;
{$EXTERNALSYM WinHttpCreateProxyResolver}

function WinHttpGetProxyForUrlEx
(
  hResolver: HINTERNET;
  pcwszUrl: PCWSTR;
  const pAutoProxyOptions: TWinHttpAutoProxyOptions;
  pContext: DWORD_PTR
): DWORD; stdcall;
{$EXTERNALSYM WinHttpGetProxyForUrlEx}

function WinHttpGetProxyResult
(
  hResolver: HINTERNET;
  out pProxyResult: TWinHttpProxyResult
): DWORD; stdcall;
{$EXTERNALSYM WinHttpGetProxyResult}

procedure WinHttpFreeProxyResult
(
  const pProxyResult: TWinHttpProxyResult
); stdcall;
{$EXTERNALSYM WinHttpFreeProxyResult}

function WinHttpResetAutoProxy
(
  hSession: HINTERNET;
  dwFlags: DWORD
): DWORD; stdcall;
{$EXTERNALSYM WinHttpResetAutoProxy}

function WinHttpGetIEProxyConfigForCurrentUser
(
  var pProxyConfig: TWinHttpCurrentUserIEProxyConfig
): BOOL; stdcall;
{$EXTERNALSYM WinHttpGetIEProxyConfigForCurrentUser}

type
  PWinHttpWebSocketOperation = ^TWinHttpWebSocketOperation;
  _WINHTTP_WEB_SOCKET_OPERATION =
  ( WINHTTP_WEB_SOCKET_SEND_OPERATION                   = 0,
    WINHTTP_WEB_SOCKET_RECEIVE_OPERATION                = 1,
    WINHTTP_WEB_SOCKET_CLOSE_OPERATION                  = 2,
    WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION               = 3
  );
  {$EXTERNALSYM _WINHTTP_WEB_SOCKET_OPERATION}
  WINHTTP_WEB_SOCKET_OPERATION = _WINHTTP_WEB_SOCKET_OPERATION;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_OPERATION}
  TWinHttpWebSocketOperation = _WINHTTP_WEB_SOCKET_OPERATION;

  PWinHttpWebSocketBufferType = ^TWinHttpWebSocketBufferType;
  _WINHTTP_WEB_SOCKET_BUFFER_TYPE =
  (
    WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE       = 0,
    WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE      = 1,
    WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE         = 2,
    WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE        = 3,
    WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE                = 4
  );
  {$EXTERNALSYM _WINHTTP_WEB_SOCKET_BUFFER_TYPE}
  WINHTTP_WEB_SOCKET_BUFFER_TYPE = _WINHTTP_WEB_SOCKET_BUFFER_TYPE;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_BUFFER_TYPE}
  TWinHttpWebSocketBufferType = _WINHTTP_WEB_SOCKET_BUFFER_TYPE;

  PWinHttpWebSocketCloseStatus = ^TWinHttpWebSocketCloseStatus;
  _WINHTTP_WEB_SOCKET_CLOSE_STATUS =
  (
    WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS                = 1000,
    WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS    = 1001,
    WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS         = 1002,
    WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS      = 1003,
    WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS                  = 1005,
    WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS                = 1006,
    WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS        = 1007,
    WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS       = 1008,
    WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS        = 1009,
    WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
    WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS           = 1011,
    WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015
  );
  {$EXTERNALSYM _WINHTTP_WEB_SOCKET_CLOSE_STATUS}
  WINHTTP_WEB_SOCKET_CLOSE_STATUS = _WINHTTP_WEB_SOCKET_CLOSE_STATUS;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_CLOSE_STATUS}
  TWinHttpWebSocketCloseStatus = _WINHTTP_WEB_SOCKET_CLOSE_STATUS;

type
  PWinHttpWebSocketAsyncResult = ^TWinHttpWebSocketAsyncResult;
  _WINHTTP_WEB_SOCKET_ASYNC_RESULT = record
    AsyncResult: TWinHttpAsyncResult;
    Operation: TWinHttpWebSocketOperation;
  end;
  {$EXTERNALSYM _WINHTTP_WEB_SOCKET_ASYNC_RESULT}
  WINHTTP_WEB_SOCKET_ASYNC_RESULT = _WINHTTP_WEB_SOCKET_ASYNC_RESULT;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_ASYNC_RESULT}
  TWinHttpWebSocketAsyncResult = _WINHTTP_WEB_SOCKET_ASYNC_RESULT;

  PWinHttpWebSocketStatus = ^TWinHttpWebSocketStatus;
  _WINHTTP_WEB_SOCKET_STATUS = record
    dwBytesTransferred: DWORD;
    eBufferType: TWinHttpWebSocketBufferType;
  end;
  {$EXTERNALSYM _WINHTTP_WEB_SOCKET_STATUS}
  WINHTTP_WEB_SOCKET_STATUS = _WINHTTP_WEB_SOCKET_STATUS;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_STATUS}
  TWinHttpWebSocketStatus = _WINHTTP_WEB_SOCKET_STATUS;

const
  WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = 123;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH}
  WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE = 15000;
  {$EXTERNALSYM WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE}

function WinHttpWebSocketCompleteUpgrade
(
  hRequest: HINTERNET;
  pContext: DWORD_PTR
): HINTERNET; stdcall;
{$EXTERNALSYM WinHttpWebSocketCompleteUpgrade}

function WinHttpWebSocketSend
(
  hWebSocket: HINTERNET;
  eBufferType: TWinHttpWebSocketBufferType;
  pvBuffer: PVOID;
  dwBufferLength: DWORD
): DWORD; stdcall;
{$EXTERNALSYM WinHttpWebSocketSend}

function WinHttpWebSocketReceive
(
  hWebSocket: HINTERNET;
  pvBuffer: PVOID;
  dwBufferLength: DWORD;
  out pdwBytesRead: DWORD;
  out peBufferType: TWinHttpWebSocketBufferType
): DWORD; stdcall;
{$EXTERNALSYM WinHttpWebSocketReceive}

function WinHttpWebSocketShutdown
(
  hWebSocket: HINTERNET;
  usStatus: USHORT;
  pvReason: PVOID;
  dwReasonLength: DWORD
): DWORD; stdcall;
{$EXTERNALSYM WinHttpWebSocketShutdown}

function WinHttpWebSocketClose
(
  hWebSocket: HINTERNET;
  usStatus: USHORT;
  pvReason: PVOID;
  dwReasonLength: DWORD
): DWORD; stdcall;
{$EXTERNALSYM WinHttpWebSocketClose}

function WinHttpWebSocketQueryCloseStatus
(
  hWebSocket: HINTERNET;
  out pusStatus: USHORT;
  pvReason: PVOID;
  dwReasonLength: DWORD;
  out pdwReasonLengthConsumed: DWORD
): DWORD; stdcall;
{$EXTERNALSYM WinHttpWebSocketQueryCloseStatus}

//{$ENDREGION}

implementation

const
  Winhttpdll = 'winhttp.dll';

//{$REGION 'winhttp.h'}
function WinHttpSetStatusCallback; external Winhttpdll name 'WinHttpSetStatusCallback';
function WinHttpTimeFromSystemTime; external Winhttpdll name 'WinHttpTimeFromSystemTime';
function WinHttpTimeToSystemTime; external Winhttpdll name 'WinHttpTimeToSystemTime';
function WinHttpCrackUrl; external Winhttpdll name 'WinHttpCrackUrl';
function WinHttpCreateUrl; external Winhttpdll name 'WinHttpCreateUrl';
function WinHttpCheckPlatform; external Winhttpdll name 'WinHttpCheckPlatform';
function WinHttpGetDefaultProxyConfiguration; external Winhttpdll name 'WinHttpGetDefaultProxyConfiguration';
function WinHttpSetDefaultProxyConfiguration; external Winhttpdll name 'WinHttpDefaultProxyConfiguration';
function WinHttpOpen; external Winhttpdll name 'WinHttpOpen';
function WinHttpCloseHandle; external Winhttpdll name 'WinHttpCloseHandle';
function WinHttpConnect; external Winhttpdll name 'WinHttpConnect';
function WinHttpReadData; external Winhttpdll name 'WinHttpReadData';
function WinHttpWriteData; external Winhttpdll name 'WinHttpWriteData';
function WinHttpQueryDataAvailable; external Winhttpdll name 'WinHttpQueryDataAvailable';
function WinHttpQueryOption; external Winhttpdll name 'WinHttpQueryOption';
function WinHttpSetOption; external Winhttpdll name 'WinHttpSetOption';
function WinHttpSetTimeouts; external Winhttpdll name 'WinHttpSetTimeouts';
//function WinHttpIsHostInProxyBypassList;
function WinHttpOpenRequest; external Winhttpdll name 'WinHttpOpenRequest';
function WinHttpAddRequestHeaders; external Winhttpdll name 'WinHttpAddRequestHeaders';
function WinHttpSendRequest; external Winhttpdll name 'WinHttpSendRequest';
function WinHttpSetCredentials; external Winhttpdll name 'WinHttpSetCredentials';
function WinHttpQueryAuthSchemes; external Winhttpdll name 'WinHttpQueryAuthSchemes';
function WinHttpQueryAuthParams; external Winhttpdll name 'WinHttpQueryAuthParams';
function WinHttpReceiveResponse; external Winhttpdll name 'WinHttpReceiveResponse';
function WinHttpQueryHeaders; external Winhttpdll name 'WinHttpQueryHeaders';
function WinHttpDetectAutoProxyConfigUrl; external Winhttpdll name 'WinHttpDetectAutoProxyConfigUrl';
function WinHttpGetProxyForUrl; external Winhttpdll name 'WinHttpGetProxyForUrl';
function WinHttpCreateProxyResolver; external Winhttpdll name 'WinHttpCreateProxyResolver' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpGetProxyForUrlEx; external Winhttpdll name 'WinHttpGetProxyForUrlEx' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpGetProxyResult; external Winhttpdll name 'WinHttpGetProxyResult' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
procedure WinHttpFreeProxyResult; external Winhttpdll name 'WinHttpFreeProxyResult' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpResetAutoProxy; external Winhttpdll name 'WinHttpResetAutoProxy' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpGetIEProxyConfigForCurrentUser; external Winhttpdll name 'WinHttpGetIEProxyConfigForCurrentUser';
function WinHttpWebSocketCompleteUpgrade; external Winhttpdll name 'WinHttpWebSocketCompleteUpgrade' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpWebSocketSend; external Winhttpdll name 'WinHttpWebSocketSend' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpWebSocketReceive; external Winhttpdll name 'WinHttpWebSocketReceive' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpWebSocketShutdown; external Winhttpdll name 'WinHttpWebSocketShutdown' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpWebSocketClose; external Winhttpdll name 'WinHttpWebSocketClose' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
function WinHttpWebSocketQueryCloseStatus; external Winhttpdll name 'WinHttpWebSocketQueryCloseStatus' {$IFDEF DELAYED_LOADING}delayed{$ENDIF};
//{$ENDREGION}

end.
